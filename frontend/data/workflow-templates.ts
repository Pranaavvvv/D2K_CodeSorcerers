import type { WorkflowTemplate } from "@/types/workflow"
import { initialAgents } from "./agents"

export const workflowTemplates: WorkflowTemplate[] = [
  {
    id: "marketing-workflow",
    name: "Marketing Agency Workflow",
    description: "Complete marketing workflow for content creation and optimization",
    nodes: [
      {
        id: "node-1",
        type: "seo-optimizer",
        position: { x: 100, y: 100 },
        data: initialAgents.find((agent) => agent.id === "seo-optimizer")!,
        inputs: initialAgents.find((agent) => agent.id === "seo-optimizer")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "seo-optimizer")!.outputs,
      },
      {
        id: "node-2",
        type: "competitor-watchdog",
        position: { x: 100, y: 250 },
        data: initialAgents.find((agent) => agent.id === "competitor-watchdog")!,
        inputs: initialAgents.find((agent) => agent.id === "competitor-watchdog")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "competitor-watchdog")!.outputs,
      },
      {
        id: "node-3",
        type: "product-recommendation",
        position: { x: 400, y: 100 },
        data: initialAgents.find((agent) => agent.id === "product-recommendation")!,
        inputs: initialAgents.find((agent) => agent.id === "product-recommendation")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "product-recommendation")!.outputs,
      },
      {
        id: "node-4",
        type: "post-creator",
        position: { x: 400, y: 250 },
        data: initialAgents.find((agent) => agent.id === "post-creator")!,
        inputs: initialAgents.find((agent) => agent.id === "post-creator")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "post-creator")!.outputs,
      },
      {
        id: "node-5",
        type: "smart-email-manager",
        position: { x: 700, y: 175 },
        data: initialAgents.find((agent) => agent.id === "smart-email-manager")!,
        inputs: initialAgents.find((agent) => agent.id === "smart-email-manager")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "smart-email-manager")!.outputs,
      },
    ],
    connections: [
      {
        id: "conn-1",
        from: { nodeId: "node-1", output: "recommendations" },
        to: { nodeId: "node-3", input: "user_data" },
      },
      {
        id: "conn-2",
        from: { nodeId: "node-2", output: "insights" },
        to: { nodeId: "node-4", input: "topic" },
      },
      {
        id: "conn-3",
        from: { nodeId: "node-3", output: "recommendations" },
        to: { nodeId: "node-5", input: "emails" },
      },
      {
        id: "conn-4",
        from: { nodeId: "node-4", output: "post_content" },
        to: { nodeId: "node-5", input: "priorities" },
      },
    ],
    steps: ["SEO Optimizer", "Competitor Watchdog", "Product Recommendation AI", "Post Creator", "Smart Email Manager"],
    useCases: [
      "Digital marketing campaigns",
      "Content strategy development",
      "Competitive analysis",
      "Product marketing optimization",
      "Customer engagement",
    ],
    domain: "marketing",
  },
  {
    id: "corporate-workflow",
    name: "Corporate Productivity Workflow",
    description: "Streamline corporate operations and boost productivity",
    nodes: [
      {
        id: "node-1",
        type: "meeting-summarizer",
        position: { x: 100, y: 150 },
        data: initialAgents.find((agent) => agent.id === "meeting-summarizer")!,
        inputs: initialAgents.find((agent) => agent.id === "meeting-summarizer")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "meeting-summarizer")!.outputs,
      },
      {
        id: "node-2",
        type: "smart-email-manager",
        position: { x: 400, y: 150 },
        data: initialAgents.find((agent) => agent.id === "smart-email-manager")!,
        inputs: initialAgents.find((agent) => agent.id === "smart-email-manager")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "smart-email-manager")!.outputs,
      },
      {
        id: "node-3",
        type: "competitor-watchdog",
        position: { x: 400, y: 300 },
        data: initialAgents.find((agent) => agent.id === "competitor-watchdog")!,
        inputs: initialAgents.find((agent) => agent.id === "competitor-watchdog")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "competitor-watchdog")!.outputs,
      },
      {
        id: "node-4",
        type: "customer-feedback-analyzer",
        position: { x: 700, y: 225 },
        data: initialAgents.find((agent) => agent.id === "customer-feedback-analyzer")!,
        inputs: initialAgents.find((agent) => agent.id === "customer-feedback-analyzer")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "customer-feedback-analyzer")!.outputs,
      },
    ],
    connections: [
      {
        id: "conn-1",
        from: { nodeId: "node-1", output: "action_items" },
        to: { nodeId: "node-2", input: "priorities" },
      },
      {
        id: "conn-2",
        from: { nodeId: "node-2", output: "organized_inbox" },
        to: { nodeId: "node-4", input: "feedback_data" },
      },
      {
        id: "conn-3",
        from: { nodeId: "node-3", output: "insights" },
        to: { nodeId: "node-4", input: "categories" },
      },
    ],
    steps: ["Meeting Summarizer", "Smart Email Manager", "Competitor Watchdog", "Customer Feedback Analyzer"],
    useCases: [
      "Executive team productivity",
      "Customer relationship management",
      "Market intelligence",
      "Internal communication optimization",
      "Strategic decision making",
    ],
    domain: "corporate",
  },
  {
    id: "legal-workflow",
    name: "Legal & Compliance Workflow",
    description: "Streamline legal processes and ensure regulatory compliance",
    nodes: [
      {
        id: "node-1",
        type: "contract-summarizer",
        position: { x: 100, y: 150 },
        data: initialAgents.find((agent) => agent.id === "contract-summarizer")!,
        inputs: initialAgents.find((agent) => agent.id === "contract-summarizer")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "contract-summarizer")!.outputs,
      },
      {
        id: "node-2",
        type: "ai-research-assistant",
        position: { x: 400, y: 150 },
        data: initialAgents.find((agent) => agent.id === "ai-research-assistant")!,
        inputs: initialAgents.find((agent) => agent.id === "ai-research-assistant")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "ai-research-assistant")!.outputs,
      },
      {
        id: "node-3",
        type: "regulatory-compliance",
        position: { x: 400, y: 300 },
        data: initialAgents.find((agent) => agent.id === "regulatory-compliance")!,
        inputs: initialAgents.find((agent) => agent.id === "regulatory-compliance")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "regulatory-compliance")!.outputs,
      },
      {
        id: "node-4",
        type: "smart-email-manager",
        position: { x: 700, y: 225 },
        data: initialAgents.find((agent) => agent.id === "smart-email-manager")!,
        inputs: initialAgents.find((agent) => agent.id === "smart-email-manager")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "smart-email-manager")!.outputs,
      },
    ],
    connections: [
      {
        id: "conn-1",
        from: { nodeId: "node-1", output: "key_obligations" },
        to: { nodeId: "node-2", input: "research_query" },
      },
      {
        id: "conn-2",
        from: { nodeId: "node-2", output: "analysis" },
        to: { nodeId: "node-4", input: "priorities" },
      },
      {
        id: "conn-3",
        from: { nodeId: "node-3", output: "compliance_updates" },
        to: { nodeId: "node-4", input: "emails" },
      },
    ],
    steps: ["Contract Summarizer", "AI Research Assistant", "Regulatory Compliance Watchdog", "Smart Email Manager"],
    useCases: [
      "Contract review and management",
      "Legal research and case preparation",
      "Regulatory compliance monitoring",
      "Legal correspondence management",
      "Risk assessment and mitigation",
    ],
    domain: "legal",
  },
  {
    id: "education-workflow",
    name: "Education & Learning Workflow",
    description: "Create personalized learning experiences and assessments",
    nodes: [
      {
        id: "node-1",
        type: "study-material-generator",
        position: { x: 100, y: 150 },
        data: initialAgents.find((agent) => agent.id === "study-material-generator")!,
        inputs: initialAgents.find((agent) => agent.id === "study-material-generator")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "study-material-generator")!.outputs,
      },
      {
        id: "node-2",
        type: "ai-research-assistant",
        position: { x: 400, y: 150 },
        data: initialAgents.find((agent) => agent.id === "ai-research-assistant")!,
        inputs: initialAgents.find((agent) => agent.id === "ai-research-assistant")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "ai-research-assistant")!.outputs,
      },
      {
        id: "node-3",
        type: "knowledge-assessment",
        position: { x: 700, y: 150 },
        data: initialAgents.find((agent) => agent.id === "knowledge-assessment")!,
        inputs: initialAgents.find((agent) => agent.id === "knowledge-assessment")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "knowledge-assessment")!.outputs,
      },
    ],
    connections: [
      {
        id: "conn-1",
        from: { nodeId: "node-1", output: "study_materials" },
        to: { nodeId: "node-2", input: "research_query" },
      },
      {
        id: "conn-2",
        from: { nodeId: "node-2", output: "analysis" },
        to: { nodeId: "node-3", input: "rubric" },
      },
    ],
    steps: ["Study Material Generator", "AI Research Assistant", "Knowledge Assessment"],
    useCases: [
      "Personalized learning paths",
      "Educational content creation",
      "Student assessment and feedback",
      "Research assistance",
      "Curriculum development",
    ],
    domain: "education",
  },
  {
    id: "development-workflow",
    name: "Software Development Workflow",
    description: "Accelerate development with AI-powered coding and review",
    nodes: [
      {
        id: "node-1",
        type: "code-generator",
        position: { x: 100, y: 150 },
        data: initialAgents.find((agent) => agent.id === "code-generator")!,
        inputs: initialAgents.find((agent) => agent.id === "code-generator")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "code-generator")!.outputs,
      },
      {
        id: "node-2",
        type: "code-reviewer",
        position: { x: 400, y: 150 },
        data: initialAgents.find((agent) => agent.id === "code-reviewer")!,
        inputs: initialAgents.find((agent) => agent.id === "code-reviewer")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "code-reviewer")!.outputs,
      },
      {
        id: "node-3",
        type: "data-transformer",
        position: { x: 400, y: 300 },
        data: initialAgents.find((agent) => agent.id === "data-transformer")!,
        inputs: initialAgents.find((agent) => agent.id === "data-transformer")!.inputs,
        outputs: initialAgents.find((agent) => agent.id === "data-transformer")!.outputs,
      },
    ],
    connections: [
      {
        id: "conn-1",
        from: { nodeId: "node-1", output: "code" },
        to: { nodeId: "node-2", input: "code" },
      },
      {
        id: "conn-2",
        from: { nodeId: "node-1", output: "documentation" },
        to: { nodeId: "node-3", input: "input_data" },
      },
    ],
    steps: ["Code Generator", "Code Reviewer", "Data Transformer"],
    useCases: [
      "Rapid prototyping",
      "Code quality assurance",
      "API integration",
      "Data transformation pipelines",
      "Documentation generation",
    ],
    domain: "development",
  },
]

